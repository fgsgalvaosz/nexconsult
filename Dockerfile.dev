# Dockerfile para desenvolvimento com hot reload
FROM golang:1.21-alpine AS development

# Instalar dependências necessárias
RUN apk add --no-cache git ca-certificates tzdata chromium

# Instalar air para hot reload
RUN go install github.com/cosmtrek/air@latest

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY go.mod go.sum ./

# Download das dependências
RUN go mod download

# Definir variáveis de ambiente
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV CHROME_PATH=/usr/bin/chromium-browser
ENV DISPLAY=:99
ENV GIN_MODE=debug

# Expor porta da aplicação
EXPOSE 8080

# Comando padrão para desenvolvimento
CMD ["air", "-c", ".air.toml"]

# Build stage para produção
FROM golang:1.21-alpine AS builder

# Instalar dependências necessárias
RUN apk add --no-cache git ca-certificates tzdata

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY go.mod go.sum ./

# Download das dependências
RUN go mod download

# Copiar código fonte
COPY . .

# Build da aplicação
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Production stage
FROM alpine:latest AS production

# Instalar dependências de runtime
RUN apk --no-cache add ca-certificates tzdata chromium

# Criar usuário não-root
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Definir diretório de trabalho
WORKDIR /root/

# Copiar binário da aplicação
COPY --from=builder /app/main .

# Copiar arquivos de configuração se necessário
COPY --from=builder /app/.env.example .

# Definir variáveis de ambiente
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV CHROME_PATH=/usr/bin/chromium-browser
ENV DISPLAY=:99
ENV GIN_MODE=release

# Expor porta da aplicação
EXPOSE 8080

# Mudar para usuário não-root
USER appuser

# Comando para executar a aplicação
CMD ["./main"]